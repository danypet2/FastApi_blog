import smtplib
from email.message import EmailMessage
from src.celery_app import celery
from src.config import SMTP_PORT, SMTP_HOST, SMTP_USER, SMTP_PASSWORD


def email_verification(user_email: str, token: str):
    email = EmailMessage()
    email['Subject'] = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—á—Ç—É!'
    email['From'] = SMTP_USER
    email['To'] = user_email

    email.set_content(
        '<div>'
        f'<h1 style="color: black;">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É! –í–∞—à –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥: </p>{token}</p></p>üòä</h1>'
        '</div>',
        subtype='html'
    )
    return email


def email_after_registration(username: str, user_email: str):
    email = EmailMessage()
    email['Subject'] = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'
    email['From'] = SMTP_USER
    email['To'] = user_email

    email.set_content(
        '<div>'
        f'<h1 style="color: black;">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º, –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É!)</h1>'
        '</div>',
        subtype='html'
    )
    return email


def email_after_verify( user_email: str):
    email = EmailMessage()
    email['Subject'] = '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã!!'
    email['From'] = SMTP_USER
    email['To'] = user_email

    email.set_content(
        '<div>'
        f'<h1 style="color: black;">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã! –ò —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∞–π—Ç–∞!</h1>'
        '</div>',
        subtype='html'
    )
    return email


def email_forgot_password(username: str, user_email: str, token: str):
    email = EmailMessage()
    email['Subject'] = '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è'
    email['From'] = SMTP_USER
    email['To'] = user_email

    email.set_content(
        '<div>'
        f'<h1 style="color: black;">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}, –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–±—Ä–æ—Å –≤–∞—à–µ–≥–æ –ø–∞—Ä–æ–ª—è! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–∏: <p>http://127.0.0.1:8000/auth/reset-password?{token}</p>üòä</h1>'
        '</div>',

        subtype='html'
    )
    return email


@celery.task
def send_email_verification(user_email: str, token: int):
    email = email_verification(user_email, token)
    with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.send_message(email)


@celery.task
def send_email_forgot_password(username: str, user_email: str, token: str):
    email = email_forgot_password(username, user_email, token)
    with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.send_message(email)


@celery.task
def send_email_after_register(username: str, user_email: str):
    email = email_after_registration(username, user_email)
    with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.send_message(email)


@celery.task
def send_email_after_verify(user_email: str):
    email = email_after_verify(user_email)
    with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.send_message(email)
